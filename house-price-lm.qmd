
---
title: "线性模型预测房价"
eval: true
warning: false
format: gfm
---

```{r}
#| echo: false
#| eval: false

library(keras)
library(tidyverse)

dataset <- dataset_boston_housing()
c(c(train_data, train_targets), c(test_data, test_targets)) %<-% dataset

mean <- apply(train_data, 2, mean)
std <- apply(train_data, 2, sd)
train_data <- scale(train_data, center = mean, scale = std)
test_data <- scale(test_data, center = mean, scale = std)

train_tib <- as_tibble(train_data)
names(train_tib) <- c("CRIM", "ZN", "INDUS", "CHAS", "NOX", "RM", "AGE", "DIS", "RAD", "TAX", "PTRATIO", "B", "LSTAT")
train_tib <- mutate(train_tib, MEDV = as.vector(train_targets))

write_csv(train_tib, file = "data/boston_housing/train_data.csv")

test_itb <- as_tibble(test_data)
names(test_itb) <- c("CRIM", "ZN", "INDUS", "CHAS", "NOX", "RM", "AGE", "DIS", "RAD", "TAX", "PTRATIO", "B", "LSTAT")
test_itb <- mutate(test_itb, MEDV = as.vector(test_targets))
write_csv(test_itb, file = "data/boston_housing/test_data.csv")
```

## 加载和预处理Boston房价数据集

```{r}
library(tidyverse)
train_data <- read_csv(file = "data/boston_housing/train_data.csv")
test_data <- read_csv(file = "data/boston_housing/test_data.csv")
```

先查看一下数据集中是否存在缺失值：
```{r}
map_dbl(train_data, ~sum(is.na(.)))
```


绘制每个预测变量，以初步了解和目标变量的关系。

```{r}
data_g <- gather(train_data, key = "Variable", value = "Value", -MEDV)
ggplot(data_g, aes(Value, MEDV)) +
  facet_wrap(~ Variable, scale = "free_x") +
  geom_point() + 
  geom_smooth() +
  geom_smooth(method = "lm", col = "red") +
  theme_bw()
```

## 定义任务

```{r}
library(mlr3verse)

train_task = as_task_regr(x = train_data, target = "MEDV", id = "train_task")
print(train_task)
```

## 定义学习器

```{r}
learner <- lrn("regr.lm")
```


## 特征选择

```{r}
# 将之前定义的任务、学习器、评估方法传递给构造函数生成FSelectInstanceSingleCrit的实例。
instance = FSelectInstanceSingleCrit$new(
  task = train_task,
  learner = learner,
  resampling = rsmp("cv", folds = 3), #这里采用3折交叉验证
  measure = msr("regr.mse"), # 以MSE值作为度量指标
  terminator = trm("evals", n_evals = 100)
)

instance
```

```{r}
as.data.table(mlr_fselectors)
```


```{r}
fselector <- fs("random_search")
```

```{r}
#| output: false

lgr::get_logger("bbotk")$set_threshold("warn")
fselector$optimize(instance)
```


```{r}
instance$result_feature_set
```

```{r}
instance$result_y
```


## 训练模型

```{r}
train_task$select(instance$result_feature_set)
learner$train(train_task)
```

```{r}
learner$model
```

## 测试模型

```{r}
test_task = as_task_regr(x = test_data, target = "MEDV", id = "test_task")
print(test_task)
```


```{r}
prediction = learner$predict(test_task)
prediction
```

```{r}
measure = msr("regr.mae")
prediction$score(measure)
```
